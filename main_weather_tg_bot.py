import requests
import datetime
from config import tg_bot_token, open_weather_token
from aiogram import Bot,types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
     await message.reply("‘≤’°÷Ä÷á ’Å’•’¶, ’•’≤’°’∂’°’Ø’® ’∫’°÷Ä’¶’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’£÷Ä’•÷Ñ ’±’•÷Ä ÷Ñ’°’≤’°÷Ñ’® \U0000263A \n"
                         "/help ’•’©’• ’≠’∂’§’´÷Ä’∂’•÷Ä ’Ø’°’∂ ")

@dp.message_handler(commands=["help"])
async def start_command(message: types.Message):
     await message.reply("‘¥’™’æ’°÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥ ’¥’•’∂÷Ñ ’Ø÷Ö’£’∂’•’∂÷Ñ ’±’•’¶, ’£÷Ä’•÷Ñ ’¢’∏’ø’® ’Ω’ø’•’≤’Æ’∏’≤’´’∂ ’°’∂’±’∂’°’Ø’°’∂ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’°’¥’¢ - –ù–æ—Ä –ì–∞—Å–ø–∞—Ä—è–Ω")

@dp.message_handler(commands=["creator"])
async def start_command(message: types.Message):
     await message.reply("------–†—É—Å—Å–∫–∏–π \n –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–ª –ê—Ä–º—è–Ω–∏–Ω üá¶üá≤ –ï–≥–æ –∑–æ–≤—É—Ç: –ù–æ—Ä–æ.\n ------"
                         "’∞’°’µ’•÷Ä’•’∂ \n‘±’µ’Ω ’¢’∏’ø’® ’Ω’ø’•’≤’Æ’•’¨ ’ß ’∞’°’µ üá¶üá≤ ’Ü÷Ä’° ’°’∂’∏÷Ç’∂’® ’Ü’∏÷Ä’∏: ’ß\n ------"
                         "English \nThis bot was created by an Armenian üá¶üá≤ His name is: Noro.")

@dp.message_handler()
async def get_weather(message: types.Message):
    code_to_smile = {
        "Clear": "’ä’°÷Ä’¶ \U00002600",
        "Clouds": "‘±’¥’∫’°’¥’°’Æ \U00002601",
        "Rain": "‘±’∂’±÷Ä÷á \U00002614",
        "Drizzle": "‘±’∂’±÷Ä÷á \U00002614",
        "Thunderstorm": "’ì’∏’©’∏÷Ä’´’Ø \U000026A1",
        "Snow": "’Å’µ’∏÷Ç’∂ \U0001F328",
        "Mist": "’Ñ’°’º’°’≠’∏÷Ç’≤ \U0001F32B"

    }

    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]

        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "’Ü’°’µ’´÷Ä ’∫’°’ø’∏÷Ç’∞’°’∂’´÷Å ’§’∏÷Ç÷Ä’Ω, ’•’Ω ’π’•’¥ ’∞’°’Ω’Ø’°’∂’∏÷Ç’¥, ’©’• ’´’∂’π’∫’´’Ω’´ ’•’≤’°’∂’°’Ø ’ß ’°’µ’∂’ø’•’≤!"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])

        await message.reply(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
              f"‘µ’≤’°’∂’°’Ø’® ÷Ñ’°’≤’°÷Ñ’∏÷Ç’¥: {city}\n’ã’•÷Ä’¥’°’Ω’ø’´’≥’°’∂’®: {cur_weather}C¬∞ {wd}\n"
              f"‘Ω’∏’∂’°’æ’∏÷Ç’©’µ’∏÷Ç’∂: {humidity}%\n’É’∂’∑’∏÷Ç’¥: {pressure} ’Ñ’´’¨’´’¥’•’ø÷Ä ’Ω’∂’§’´’Ø\n’î’°’¥’´: {wind} ’¥/’æ÷Ä’Ø\n"
              f"‘±÷Ä’•÷Ç’°’Æ’°’£: {sunrise_timestamp}\n’Ñ’°’µ÷Ä’°’¥’∏÷Ç’ø: {sunset_timestamp}\n’ï÷Ä’æ’° ’ø’•÷Ç’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®: {length_of_the_day}\n"
              f"***‘º’°’æ ÷Ö÷Ä ’•’¥ ’¥’°’≤’©’∏÷Ç’¥!*** \U0001F603"
              )

    except :
        await message.reply("\U00002620 ’ç’ø’∏÷Ç’£’•÷Ñ ÷Ñ’°’≤’°÷Ñ’´ ’°’∂’∏÷Ç’∂’® \U00002620")


if __name__ == '__main__':
    executor.start_polling(dp)